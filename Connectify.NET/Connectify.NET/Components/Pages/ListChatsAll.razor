@page "/ListChatsAll/"
@using APIConnectify.NET.Models
@rendermode InteractiveServer
@using System.Net.Http.Json
@using static System.Reflection.Metadata.BlobBuilder
@inject IHttpClientFactory ClientFactory
@inject ListChatsAll ListChatsAl
@inject GroupAdd GroupAd
@inject GroupChats GroupChat
@* @using Newtonsoft.Json
 *@
@inject NavigationManager NavigationManager
<style>
    /* Стили для контейнера группы чата */
    .chat-group {
        margin-bottom: 10px; /* Расстояние между группами чата */
    }

    /* Стили для кнопки группы чата */
    .group-button {
        display: block;
        width: 100%;
        padding: 10px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .group-button:hover {
            background-color: #0056b3; /* Изменение цвета при наведении курсора */
        }

    /* Стили для кнопки "Создать группу" */
    .create-group-button {
        display: block;
        width: 200px;
        padding: 10px;
        margin: 10px 0; /* Отступ сверху и снизу */
        background-color: #28a745;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        text-align: center; /* Выравнивание текста по центру */
    }

        .create-group-button:hover {
            background-color: #218838; /* Изменение цвета при наведении курсора */
        }
</style>

<h1>Чаты</h1>
@if (users == null)
{
     
}
else
{
    

@if (users.Group == null)
{

}
else
{
    @foreach (var group in users.Group)
    {
            <div class="chat-group">
                <button class="group-button" @onclick="() => OpenGroupChat(group)">
                @group.GroupName <!-- Отображение имени группы -->
            </button>
        </div>
    }

}}
<!-- Кнопка "Создать группу" -->
<button class="create-group-button" @onclick="IncrementCount">Создать группу</button>

@code {

    [Parameter]
    public Users users { get; set; }

    string url = "https://localhost:7086/api/GroupsControllers";

    HttpClient httpClient = null!;
    private void IncrementCount()
    {
        try
        {

            GroupAd.users = users;
            NavigationManager.NavigateTo($"/GroupAdd/");
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if(users == null)
            {
                if(ListChatsAl == null)
                {

                }
                else
                {
                    users = ListChatsAl.users;
                }
            }
            httpClient = ClientFactory.CreateClient();
            httpClient.BaseAddress = new Uri(url);
            if (users == null)
            {

            }
            else
            {
                await LoadData();
                StateHasChanged();

            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    async Task LoadData()
    {
        try
        {
            var us = await httpClient.GetFromJsonAsync<Users>(httpClient.BaseAddress);
            if (us == null)
            {

            }
            else
            {
                users = us;
            }
        }
        catch (Exception)
        {

        }
    }


    void OpenGroupChat(Group groupId)
    {
        try
        {
            GroupChat.users = users;
            GroupChat.group = groupId;

            NavigationManager.NavigateTo($"/GroupChat/");
        }
        catch (Exception)
        {

        }
    }
}
