@page "/GroupChat/"
@using APIConnectify.NET.Models
@rendermode InteractiveServer
@using System.Net.Http.Json
@using Newtonsoft.Json
@using System.Text
@using static System.Reflection.Metadata.BlobBuilder
@inject IHttpClientFactory ClientFactory
@inject GroupChats GroupChat

@* @using Newtonsoft.Json
 *@
@inject NavigationManager NavigationManager

@try
{

    @if (groupsChats == null)
    {



    }
    else
    {
        @if (groupsChats.Count() > 0)
        {
            @foreach (var user in groupsChats)
            {
                <div>

                    @{
                      
                            var result =  updates(user.Users);

                       
                    }
                    <b>@result.Result;</b>

@*                     <b >@updates(user.Users).Result.ToString()</b>
 *@                    
                    <p>@user.Messages</p>
                </div>
            }
        }
        else
        {
           
        }

    }

    <input type="text" @bind="Название">
    <button @onclick="SubmitForm">Отправить</button>


}
catch (Exception ex)
{
    <p><em>Ошибка !!</em></p>

}


@code 
{
    public string pub { get; set; }
    public string Название{ get; set; }
    [Parameter]
    public Group group { get; set; }
    // public int id { get; set; }
    string url = "https://localhost:7086/api/GroupsChatsControllers/";
    [Parameter]

    public Users users { get; set; }//Пользователь который Авторизировался
    HttpClient httpClient = null!;
    public  
         Users user  { get; set; }//Пользователь который Авторизировался


    string urlPOST = "https://localhost:7086/api/GroupsChatsControllers";

    List<GroupsChats> groupsChats = new List<GroupsChats>();

    string urUser = "https://localhost:7086/api/UsersControllers/";

    bool update = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if( GroupChat == null)
            {

            }
            else
            {
                users = GroupChat.users;

                group = GroupChat.group;
                httpClient = ClientFactory.CreateClient();
                if (group == null)
                {

                }
                else
                {

                    httpClient.BaseAddress = new Uri(url + group.Id);
                    await LoadData();
                    update = true;
                }



            }
            if (update == true)
            {
                await OnAfterRenderAsync(update);

            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    public async Task<string> updates(int id)
    {
        try
        {
            httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri(urUser+id);

            var user = await GetUserByIdAsync(id);
            if (user != null)
            {
                return user.Username;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching user: {ex.Message}");
        }
        return string.Empty;
    }

    private async Task<Users> GetUserByIdAsync(int id)
    {
        try
        {
            HttpResponseMessage response = await httpClient.GetAsync(urUser+id.ToString());
            response.EnsureSuccessStatusCode();

            return await response.Content.ReadFromJsonAsync<Users>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting user data: {ex.Message}");
            return null;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            // This will be executed after the component has rendered
            // Check conditions here and call LoadData as needed
            await LoadData();
        }
    }
    async Task LoadData()
    {
        try
        {
            groupsChats = await httpClient.GetFromJsonAsync<List<GroupsChats>>(httpClient.BaseAddress) ;

        }
        catch
        {

        }
    }

    private async void SubmitForm()
    {
        try
        {
            if(!string.IsNullOrEmpty(Название))
            {
                byte[] bytes = new byte[10];
                // Files fs = new Files(1, bytes);
                GroupsChats groupsChats = new GroupsChats {Id= 0, Group = group.Id,Users= users.Id,Messages= Название,Bytes= bytes };
                httpClient = ClientFactory.CreateClient();
                httpClient.BaseAddress = new Uri(urlPOST);
                string jsonString = JsonConvert.SerializeObject(groupsChats);
                HttpContent content = new StringContent(jsonString, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(url, content);
                await Update();

            }
        }
        catch(Exception)
        {

        }
    }


    public async Task Update()
    {
        httpClient = ClientFactory.CreateClient();

        httpClient.BaseAddress = new Uri(url + group.Id);
        await LoadData();
    }

}
