@page "/GroupChat/"
@using APIConnectify.NET.Models
@rendermode InteractiveServer
@using System.Net.Http.Json
@using NAudio.Wave
@using Newtonsoft.Json
@using System.Text
@using static System.Reflection.Metadata.BlobBuilder
@inject IHttpClientFactory ClientFactory
@inject GroupChats GroupChat
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using APIConnectify.NET.Models
@using System.Net.Sockets
@using System.Collections.Concurrent
@using System.Net
@inject IJSRuntime JSRuntime
<style>
    .page-container {
        display: flex;
        justify-content: center;
        align-items: flex-start; /* Выравнивание контейнера по верхнему краю */
        height: 100vh;
        padding: 10px 10px 10px; /* Увеличение отступа сверху и снизу, снизу оставлено 50px */
        box-sizing: border-box;
    }

    .chat-container {
        background-color: #ffffff;
        width: 100%;
        max-width: 1000px; /* Максимальная ширина контейнера чата */
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        box-sizing: border-box;
        overflow: hidden; /* Скрытие излишнего содержимого чата за пределами контейнера */
    }

    .chat-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        border-bottom: 1px solid #ccc;
        padding-bottom: 10px;
    }

    .chat-title {
        font-size: 24px;
        color: #333;
        margin: 0;
    }

    .return-button,
    .another-button {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    }

    .chat-messages {
        max-height: 60vh; /* Максимальная высота области сообщений, соответствующая 60% высоты видимой области */
        overflow-y: auto;
        margin-bottom: 20px;
        padding-right: 10px;
    }

    .chat-message {
        background-color: #f0f0f0;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 12px;
    }

    .user-info {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
    }

        .user-info b {
            margin-right: 8px;
            font-weight: bold;
            color: #333;
        }

        .user-info img {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 8px;
        }

    .chat-input {
        flex: 1;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-right: 10px;
        box-sizing: border-box;
        font-size: 16px;
    }

    .chat-send-button {
        background-color: #4caf50;
        color: #fff;
        border: none;
        padding: 12px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }

    .no-messages {
        color: #666;
        text-align: center;
    }
</style>


<div class="page-container">
    @try
    {
        <div class="chat-container">
            @if (group != null)
            {
                <div class="chat-header">
                    <Bottungoback></Bottungoback>

                      <h1 class="chat-title">@group.GroupName</h1>
                    <button @onclick="OpenAddUserModal" class="another-button">Добавить собеседника</button>
@*                     <button @onclick="" class="another-button">Создать Сервер</button>
 *@          

                    <AddUserModal @ref="addUserModal" Title="Добавление собеседника">
                        <ModalBody>
                            <GroupAdd @ref="groupAdd" users="users" />

                            <!-- Кастомизируйте содержимое модального окна по необходимости -->
                   
                        </ModalBody>
                    </AddUserModal>
                </div>
            }


            <div class="chat-messages">
                @if (groupsChats != null && groupsChats.Any())
                {

              
                    @foreach (var user in groupsChats)
                    {
                        <div class="chat-message">
                            <div class="user-info">
                                <img src="data:image/png;base64,@Convert.ToBase64String(user.Users.Picture.Name)" alt="User Avatar">
                                <b>@user.Users.Username</b>
                            </div>
                            <p>@user.Messages</p>
                        </div>
                    }
                }
                else
                {
                    <p class="no-messages">Нет сообщений.</p>
                }
            </div>

            <div class="input-container">
                <input type="text" placeholder="Введите сообщение..." @bind="Название" class="chat-input">
                <button @onclick="SubmitForm" class="chat-send-button">Отправить</button>
            </div>
        </div>

    }
    catch (Exception ex)
    {
        <p><em>Ошибка !!</em></p>
    }
</div>
<script src="call.js"></script>

@* <script>
    // JavaScript функция для возврата на предыдущую страницу
    function goBack() {
        window.history.back(); // Используем метод window.history.back() для перехода назад
    }
</script> *@

@code
{

    public string numbers { get; set; }

    public string ipaderess { get; set; }
    public GroupAdd groupAdd;

    public string pub { get; set; }
    public string Название { get; set; }
    [Parameter]
    public Group group { get; set; }
    // public int id { get; set; }

    string url = "http://localhost:5000/api/GroupsChatsControllers/";
    [Parameter]

    public Users users { get; set; }//Пользователь который Авторизировался
    HttpClient httpClient = null!;
    public Users user { get; set; }//Пользователь который Авторизировался

    private AddUserModal addUserModal;
    string urlPOST = "http://localhost:5000/api/GroupsChatsControllers";

    List<GroupChatsSelect> groupsChats = new List<GroupChatsSelect>();

    string urUser = "http://localhost:5000/api/UsersControllers/";
    private void OpenAddUserModal()
    {
        try
        {
            addUserModal.Users = users;
            // Открытие модального окна добавления собеседника
            addUserModal.Show();

        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    bool update = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (GroupChat == null)
            {

            }
            else
            {
                users = GroupChat.users;
                group = GroupChat.group;
                httpClient = ClientFactory.CreateClient();
                if (group == null)
                {

                }
                else
                {

                    httpClient.BaseAddress = new Uri(url + group.Id);
                    await LoadData();
                    update = true;
                }
            }
            if (update == true)
            {
                await OnAfterRenderAsync(update);
                StateHasChanged();

            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            // This will be executed after the component has rendered
            // Check conditions here and call LoadData as needed
            await LoadData();
        }
    }

    async Task LoadData()
    {
        try
        {
            groupsChats = await httpClient.GetFromJsonAsync<List<GroupChatsSelect>>(httpClient.BaseAddress);

        }
        catch
        {

        }
    }

    private async void SubmitForm()
    {
        try
        {
            if (!string.IsNullOrEmpty(Название))
            {
                byte[] bytes = new byte[10];
                // Files fs = new Files(1, bytes);
                GroupsChats groupsChats = new GroupsChats { Id = 0, Group = group.Id, Users = users.Id, Messages = Название, Bytes = bytes };
                httpClient = ClientFactory.CreateClient();
                httpClient.BaseAddress = new Uri(urlPOST);
                string jsonString = JsonConvert.SerializeObject(groupsChats);
                HttpContent content = new StringContent(jsonString, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(url, content);
                await Update();
                StateHasChanged();
            }
        }
        catch (Exception)
        {

        }
    }

    public async Task Update()
    {
        httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(url + group.Id);
        await LoadData();
    }

}




         @*                     <p>Форма для добавления участника здесь...</p>
                    *@    @*
                    <button @onclick="Connect2" class="another-button">Добавить собеседника</button>
                    <input type="text" placeholder="Введите сервер адрес" @bind="ipaderess" class="chat-input">
                    <input type="text" placeholder="Включить и вкл микрофон 1 и 0" @bind="numbers" class="chat-input"> *@