@page "/GroupChat/"
@using APIConnectify.NET.Models
@rendermode InteractiveServer
@using System.Net.Http.Json
@using NAudio.Wave
@using Newtonsoft.Json
@using System.Text
@using static System.Reflection.Metadata.BlobBuilder
@inject IHttpClientFactory ClientFactory
@inject GroupChats GroupChat
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using APIConnectify.NET.Models
@using System.Net.Sockets
@using System.Collections.Concurrent
@using System.Net
<style>
    .page-container {
        display: flex;
        justify-content: center;
        align-items: flex-start; /* Выравнивание контейнера по верхнему краю */
        height: 100vh;
        padding: 10px 10px 10px; /* Увеличение отступа сверху и снизу, снизу оставлено 50px */
        box-sizing: border-box;
    }

    .chat-container {
        background-color: #ffffff;
        width: 100%;
        max-width: 1000px; /* Максимальная ширина контейнера чата */
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        box-sizing: border-box;
        overflow: hidden; /* Скрытие излишнего содержимого чата за пределами контейнера */
        transition: background 0.2s ease;
        scroll-behavior: smooth;
    }

    .chat-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        border-bottom: 1px solid #ccc;
        padding-bottom: 10px;
        transition: background 0.2s ease;
    }

    .chat-title {
        font-size: 24px;
        color: #333;
        margin: 0;
    }

    .return-button,
    .another-button {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
    }

    .chat-messages {
        
        max-height: 60vh; /* Максимальная высота области сообщений, соответствующая 60% высоты видимой области */
        overflow-y: auto;
        margin-bottom: 20px;
        padding-right: 10px;
        scroll-behavior: smooth;
        padding: 10px 20px;
    }

    .chat-message {
        background-color: #f0f0f0;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 12px;
    }

    .user-info {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
    }

        .user-info b {
            margin-right: 8px;
            font-weight: bold;
            color: #333;
        }

        .user-info img {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 8px;
        }

    .chat-input {
        flex: 1;
        padding: 12px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-right: 10px;
        box-sizing: border-box;
        font-size: 16px;
    }

    .chat-send-button {
        background-color: #4caf50;
        color: #fff;
        border: none;
        padding: 12px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }

    .no-messages {
        color: #666;
        text-align: center;
    }

    html {
        scroll-behavior: smooth;
    }
</style>


<div class="page-container">
    @try
    {
        <div class="chat-container" id="chat-container">
            @if (group != null)
            {
                <div class="chat-header">
                    <Bottungoback></Bottungoback>

                    <h1 class="chat-title">@group.GroupName</h1>
                    <button @onclick="OpenAddUserModal" class="another-button">Добавить собеседника</button>
                    @*                     <button @onclick="" class="another-button">Создать Сервер</button>
            *@

                    <AddUserModal @ref="addUserModal" Title="Добавление собеседника">
                        <ModalBody>
                            <GroupAdd @ref="groupAdd" users="users" />

                            <!-- Кастомизируйте содержимое модального окна по необходимости -->

                        </ModalBody>
                    </AddUserModal>
                </div>
            }


            <div class="chat-messages" id="chat-messages" @ref="chatContainerRef">
                @if (groupsChats != null && groupsChats.Any())
                {


                    @foreach (var user in groupsChats)
                    {
                        <div class="chat-message" id="chat-messages">
                            <div class="user-info">
                                @if(users.Id == user.Users.Id)
                                {
                                    <img src="data:image/png;base64,@Convert.ToBase64String(user.Users.Picture.Name)" alt="User Avatar">
                                    <b>Я</b>
                                }
                                else
                                {
                                    <img src="data:image/png;base64,@Convert.ToBase64String(user.Users.Picture.Name)" alt="User Avatar">
                                    <b>@user.Users.Username</b>
                                }
                            </div>
                            <p>@user.Messages</p>
                        </div>
                    }
                }
                else
                {
                    <p class="no-messages">Нет сообщений.</p>
                }
            </div>

            <div class="input-container">
                <input type="text" placeholder="Введите сообщение..." @bind="Название" class="chat-input">
                <button @onclick="SubmitForm" class="chat-send-button">Отправить</button>
            </div>
        </div>

    }
    catch (Exception ex)
    {
        <p><em>Ошибка !!</em></p>
    }
</div>
@*     //  function scrollToBottomWith() {
    //     // await new Promise(resolve => setTimeout(resolve, 1)); // Ждем 100 миллисекунд
    //     scrollToBottom();
    //     scrollToBottoms();
    //      scrollToBottomss();
    // }
 *@
<script>
    function scrollToBottom() {
        var chatContainer = document.querySelector('.chat-messages');
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    function requestScrollToBottom() {
        setTimeout(scrollToBottom, 100);
    }

    window.scrollToBottom = (element) => {
    element.scrollTop = element.scrollHeight;
};

</script>





@code
{
    private ElementReference chatContainerRef;

    public bool Sroll = false;

    public string numbers { get; set; }

    public string ipaderess { get; set; }
    public GroupAdd groupAdd;

    public string pub { get; set; }
    public string Название { get; set; }
    [Parameter]
    public Group group { get; set; }
    // public int id { get; set; }

    string url = "http://localhost:5000/api/GroupsChatsControllers/";
    [Parameter]

    public Users users { get; set; }//Пользователь который Авторизировался
    HttpClient httpClient = null!;
    public Users user { get; set; }//Пользователь который Авторизировался

    private AddUserModal addUserModal;
    string urlPOST = "http://localhost:5000/api/GroupsChatsControllers";

    List<GroupChatsSelect> groupsChats = new List<GroupChatsSelect>();
    List<GroupChatsSelect> groupsChat = new List<GroupChatsSelect>();

    private Timer _timer;

    string urUser = "http://localhost:5000/api/UsersControllers/";
    private void OpenAddUserModal()
    {
        try
        {
            addUserModal.Users = users;
            // Открытие модального окна добавления собеседника
            addUserModal.Show();

        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    bool update = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (GroupChat == null)
            {

            }
            else
            {

                httpClient = ClientFactory.CreateClient();


                users = GroupChat.users;
                group = GroupChat.group;
                if (group == null)
                {

                }
                else
                {

                    // httpClient.BaseAddress = new Uri(url + group.Id);
                    // await LoadData();
                    // update = true;
                    // _= Task.Run(() => Normal());
                    // Task task = new Task(D =>Normal());
                    _ = Task.Run(() => Normal());

                    StateHasChanged();

                    // task.Start()


                    // _ = Task.Run(() => Scrollview());


                }

            }

            if (update == true)
            {
                // await OnAfterRenderAsync(update);

            }

        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }
    private static SemaphoreSlim semaphore;

    public async Task Normal()
    {
        try
        {

            while (true)
            {
                semaphore = new SemaphoreSlim(1, 1);

                // await Task.Delay(TimeSpan.FromSeconds(1)); // Ждем 10 секунд перед следующим выполнением
                semaphore.Wait(); // Ожидание доступа к ресурсу

                using (httpClient = ClientFactory.CreateClient())
                {



                    // Перерисовываем компонент после обновления данных

                    httpClient.BaseAddress = new Uri(url + group.Id);

                    groupsChats = await httpClient.GetFromJsonAsync<List<GroupChatsSelect>>(httpClient.BaseAddress);

                    // Обновление состояния компонента на основе загруженных данных
                    if (groupsChat.Count < groupsChats.Count())
                    {
                        Sroll = true;
                    }

                    if (groupsChat.Count == 0)
                    {
                        Sroll = false;
                    }
                    await Task.Delay(TimeSpan.FromMilliseconds(1)); // Ждем 10 секунд перед следующим выполнением
                    await InvokeAsync(async () =>
                     {
                         StateHasChanged(); // Перерисовываем компонент после обновления данных

                         if (Sroll == true)
                         {
                             await JSRuntime.InvokeVoidAsync("scrollToBottom", chatContainerRef);
                             // await JSRuntime.InvokeVoidAsync("requestScrollToBottom");
                             // await JSRuntime.InvokeVoidAsync("requestScrollToBottom");
                             // await JSRuntime.InvokeVoidAsync("requestScrollToBottom");
                             // await JSRuntime.InvokeVoidAsync("requestScrollToBottom");

                             // // await  Scrollview();
                             // // await Scrollview();
                             Sroll = false;
                             // await JSRuntime.InvokeVoidAsync("requestScrollToBottom");
                             // await JSRuntime.InvokeVoidAsync("requestScrollToBottom");

                         }
                         groupsChat = groupsChats;
                        
                     });
                }



                semaphore.Release(); // Освобождение ресурса


            }
        }
        catch (Exception)
        {

        }
    }

 

    private async Task SubmitForm()
    {
        try
        {
            httpClient = ClientFactory.CreateClient();

            if (!string.IsNullOrEmpty(Название))
            {
                byte[] bytes = new byte[10];
                // Files fs = new Files(1, bytes);
                GroupsChats groupsChat = new GroupsChats { Id = 0, Group = group.Id, Users = users.Id, Messages = Название, Bytes = bytes };

                httpClient.BaseAddress = new Uri(urlPOST);
                string jsonString = JsonConvert.SerializeObject(groupsChat);
                HttpContent content = new StringContent(jsonString, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(url, content);
                // httpClient = ClientFactory.CreateClient();
                // httpClient.BaseAddress = new Uri(url + group.Id);

                // groupsChats = await httpClient.GetFromJsonAsync<List<APIConnectify.NET.Models.GroupChatsSelect>>(httpClient.BaseAddress);
                Название = "";
                // await Update();
                // StateHasChanged();    
                Sroll = true;

            }


        }
        catch (Exception)
        {

        }
    }


    public async Task Scrollview()
    {
        try
        {
            while (true)
            {
                if (Sroll)
                {
                
                    await JSRuntime.InvokeVoidAsync("scrollToBottom");
                    Sroll = false;
                }
            }
        }
    catch (Exception)
    {
        // Обработка исключений при необходимости
    }
}
}

@* 
       // async Task LoadData()
    // {
    //     try
    //     {
    //         using (MemoryStream mem = new MemoryStream())
    //         {


    //             groupsChats = await httpClient.GetFromJsonAsync<List<GroupChatsSelect>>(httpClient.BaseAddress);
    //             // Обновление состояния компонента на основе загруженных данных

    //             // Перерисовываем компонент после обновления данных

    //             await Task.Delay(TimeSpan.FromSeconds(1)); // Ждем 10 секунд перед следующим выполнением
    //             await InvokeAsync(() =>
    //            {
    //                // groupsChats = groupsChats;
    //                StateHasChanged(); // Перерисовываем компонент после обновления данных
    //            });
    //         }

    //     }
    //     catch
    //     {

    //     }
    // }
   // public async Task Update()
    // {


    //     await LoadData();
    // }
    //    {
    //        // Вызываем метод для загрузки/обновления данных
    //        await LoadData();
    //      StateHasChanged(); // Перерисовываем компонент после обновления данных
    //    }, null, TimeSpan.Zero, TimeSpan.FromSeconds(2)); // Вызываем каждые 10 секунд
    // }
    // =+OnAfterRenderAsync(update); *@

         @*                     <p>Форма для добавления участника здесь...</p>
                    *@    @*
                    <button @onclick="Connect2" class="another-button">Добавить собеседника</button>
                    <input type="text" placeholder="Введите сервер адрес" @bind="ipaderess" class="chat-input">
                    <input type="text" placeholder="Включить и вкл микрофон 1 и 0" @bind="numbers" class="chat-input"> *@