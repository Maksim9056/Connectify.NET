@page "/GroupChat/"
@using APIConnectify.NET.Models
@rendermode InteractiveServer
@using System.Net.Http.Json
@using Newtonsoft.Json
@using System.Text
@using static System.Reflection.Metadata.BlobBuilder
@inject IHttpClientFactory ClientFactory
@inject GroupChats GroupChat
@using Newtonsoft.Json
@inject NavigationManager NavigationManager

<style>
    .s {
        margin-top: 10px;
    }
</style>

@try
{
    @if (groupsChats != null && groupsChats.Any())
    {
        <h1>@group.GroupName</h1>

      @*   <div>
            <button type="submit" class="another-button" @onclick="RegForm">Добавить собесодника</button>
        </div>    *@     
        @if (groupsChats.Count() > 0)
        {

            @foreach (var user in groupsChats)
            {

                <div class="s">

                    <b>@user.Users.Username<img src="data:image/png;base64,@Convert.ToBase64String(user.Users.Picture.Name)  " width="30"></b>
                    <p>@user.Messages</p>
                </div>
            }
        }
        else
        {

        }

    }

    <input type="text" @bind="Название">
    <button @onclick="SubmitForm">Отправить</button>


}
catch (Exception ex)
{
    <p><em>Ошибка !!</em></p>

}


@code
{
    public string pub { get; set; }
    public string Название { get; set; }
    [Parameter]
    public Group group { get; set; }
    // public int id { get; set; }
    string url = "https://localhost:7086/api/GroupsChatsControllers/";
    [Parameter]

    public Users users { get; set; }//Пользователь который Авторизировался
    HttpClient httpClient = null!;
    public Users user { get; set; }//Пользователь который Авторизировался


    string urlPOST = "https://localhost:7086/api/GroupsChatsControllers";

    List<GroupChatsSelect> groupsChats = new List<GroupChatsSelect>();

    string urUser = "https://localhost:7086/api/UsersControllers/";

    bool update = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (GroupChat == null)
            {

            }
            else
            {
                users = GroupChat.users;
                group = GroupChat.group;
                httpClient = ClientFactory.CreateClient();
                if (group == null)
                {

                }
                else
                {

                    httpClient.BaseAddress = new Uri(url + group.Id);
                    await LoadData();
                    update = true;
                }
            }
            if (update == true)
            {
                await OnAfterRenderAsync(update);
                StateHasChanged();

            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            // This will be executed after the component has rendered
            // Check conditions here and call LoadData as needed
            await LoadData();
        }
    }
    async Task LoadData()
    {
        try
        {
            groupsChats = await httpClient.GetFromJsonAsync<List<GroupChatsSelect>>(httpClient.BaseAddress);

        }
        catch
        {

        }
    }

    private async void SubmitForm()
    {
        try
        {
            if (!string.IsNullOrEmpty(Название))
            {
                byte[] bytes = new byte[10];
                // Files fs = new Files(1, bytes);
                GroupsChats groupsChats = new GroupsChats { Id = 0, Group = group.Id, Users = users.Id, Messages = Название, Bytes = bytes };
                httpClient = ClientFactory.CreateClient();
                httpClient.BaseAddress = new Uri(urlPOST);
                string jsonString = JsonConvert.SerializeObject(groupsChats);
                HttpContent content = new StringContent(jsonString, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(url, content);
                await Update();
                StateHasChanged();
            }
        }
        catch (Exception)
        {

        }
    }
    public async Task Update()
    {
        httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(url + group.Id);
        await LoadData();
    }
    private async Task RegForm()
    {
    }
}
