@page "/GroupChat/"
@using APIConnectify.NET.Models
@rendermode InteractiveServer
@using System.Net.Http.Json
@using Newtonsoft.Json
@using System.Text
@using static System.Reflection.Metadata.BlobBuilder
@inject IHttpClientFactory ClientFactory
@inject GroupChats GroupChat

@* @using Newtonsoft.Json
 *@
@inject NavigationManager NavigationManager

@try
{

    @if (groupsChats == null)
    {



    }
    else
    {
        @if (groupsChats.Count() > 0)
        {
            @foreach (var user in groupsChats)
            {    
                <div>
                    <b>@user.Users.Username</b>
                    <p>@user.Messages</p>
                </div>
            }
        }
        else
        {
           
        }
    }

    <input type="text" @bind="Название">
    <button @onclick="SubmitForm">Отправить</button>


}
catch (Exception ex)
{
    <p><em>Ошибка !!</em></p>

}


@code 
{

    public string Название{ get; set; }
    [Parameter]
    public Group group { get; set; }
    // public int id { get; set; }
    string url = "https://localhost:7086/api/GroupsChatsControllers/";
    [Parameter]

    public Users users { get; set; }//Пользователь который Авторизировался
    HttpClient httpClient = null!;



    string urlPOST = "https://localhost:7086/api/GroupsChatsControllers";

    List<GroupsChats> groupsChats = new List<GroupsChats>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if( GroupChat == null)
            {

            }
            else
            {
                users = GroupChat.users;

                group = GroupChat.group;
                httpClient = ClientFactory.CreateClient();
                httpClient.BaseAddress = new Uri(url + group.Id);
                await LoadData();


            }

        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    async Task LoadData()
    {
        try
        {
            groupsChats = await httpClient.GetFromJsonAsync<List<GroupsChats>>(httpClient.BaseAddress) ;
        }
        catch
        {

        }
    }

    private async void SubmitForm()
    {
        try
        {
            if(!string.IsNullOrEmpty(Название))
            {
                byte[] bytes = new byte[10];
                // Files fs = new Files(1, bytes);
                GroupsChats groupsChats = new GroupsChats(0, group.Id, users, Название, bytes);
                httpClient = ClientFactory.CreateClient();
                httpClient.BaseAddress = new Uri(urlPOST);
                string jsonString = JsonConvert.SerializeObject(groupsChats);
                HttpContent content = new StringContent(jsonString, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(url, content);
                Update();

            }
        }
        catch(Exception)
        {

        }
    }


    public async void Update()
    {
        httpClient = ClientFactory.CreateClient();

        httpClient.BaseAddress = new Uri(url + group.Id);
        await LoadData();
    }

}
