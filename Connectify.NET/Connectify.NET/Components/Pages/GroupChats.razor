@page "/GroupChat/"
@using APIConnectify.NET.Models
@rendermode InteractiveServer
@using System.Net.Http.Json
@using Newtonsoft.Json
@using System.Text
@using static System.Reflection.Metadata.BlobBuilder
@inject IHttpClientFactory ClientFactory
@inject GroupChats GroupChat
@using Newtonsoft.Json
@inject NavigationManager NavigationManager

<style>
   /*  .s {
        margin-top: 10px;
    } */
    /* Стили для контейнера чата */
    /* .chat-container {
        width: 100%;
        max-width: 400px; /* Максимальная ширина контейнера чата */
        background-color: #f9f9f9;
        border: 1px solid #ccc;
        padding: 10px;
        box-sizing: border-box;
    }

    /* Стили для сообщений чата */
    .chat-message {
        background-color: #ffffff;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 8px;
        margin-bottom: 10px;
    }

        /* Стили для отправленных сообщений */
        .chat-message.sent {
            background-color: #dcf8c6; /* Цвет фона для отправленных сообщений */
        }

    /* Стили для аватара */
    .chat-avatar {
        width: 30px;
        height: 30px;
        border-radius: 50%; /* Круглый аватар */
        margin-right: 10px;
    }

    /* Стили для имени пользователя */
    .chat-username {
        font-weight: bold;
        color: #333;
    }

    /* Пример стилей для ввода сообщения */
    .chat-input {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-top: 10px;
    }

    /* Стили для кнопки отправки сообщения */
    .chat-send-button {
        background-color: #4caf50;
        color: #ffffff;
        border: none;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
    }

        /* Псевдокласс для стилизации активного состояния кнопки отправки сообщения */
        .chat-send-button:hover {
            background-color: #45a049;
        }
 */
    /* Стили для контейнера сообщений чата */
    .chat-messages {
        margin-top: 20px;
    }

    /* Стили для отдельного сообщения в чате */
    .chat-message {
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
        background-color: #f9f9f9;
    }

    /* Стили для информации о пользователе */
    .user-info {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

        .user-info b {
            margin-right: 5px;
            font-weight: bold;
        }

    /* Стили для входного поля чата */
    /* Стили для входного поля чата */
    .chat-input {
        width: calc(100% - 80px); /* Ширина поля минус ширина кнопки */
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-top: 10px;
        margin-right: 10px; /* Отступ справа */
    }

    /* Стили для кнопки отправки сообщения */
    .chat-send-button {
        background-color: #4caf50;
        color: #ffffff;
        border: none;
        padding: 8px 12px;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 10px; /* Отступ сверху */
    }

        /* Псевдокласс для стилизации активного состояния кнопки отправки сообщения */
        .chat-send-button:hover {
            background-color: #45a049;
        }

</style>


@try
{
    @if (group != null)
    {
        <h1>@group.GroupName</h1>
    }

    @if (groupsChats != null && groupsChats.Any())
    {
        @if (groupsChats.Count() > 0)
        {
            <div class="chat-messages">
                @foreach (var user in groupsChats)
                {
                    <div class="chat-message">
                        <div class="user-info">
                            <b>@user.Users.Username</b>
                            <img src="data:image/png;base64,@Convert.ToBase64String(user.Users.Picture.Name)" width="30">
                        </div>
                        <p>@user.Messages</p>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No messages found.</p>
        }
    }

    <div class="input-container">
        <input type="text" @bind="Название" class="chat-input">
        <button @onclick="SubmitForm" class="chat-send-button">Отправить</button>
    </div>
}
catch (Exception ex)
{
    <p><em>Ошибка !!</em></p>
}




@code
{
    public string pub { get; set; }
    public string Название { get; set; }
    [Parameter]
    public Group group { get; set; }
    // public int id { get; set; }
    string url = "https://localhost:7086/api/GroupsChatsControllers/";
    [Parameter]

    public Users users { get; set; }//Пользователь который Авторизировался
    HttpClient httpClient = null!;
    public Users user { get; set; }//Пользователь который Авторизировался


    string urlPOST = "https://localhost:7086/api/GroupsChatsControllers";

    List<GroupChatsSelect> groupsChats = new List<GroupChatsSelect>();

    string urUser = "https://localhost:7086/api/UsersControllers/";

    bool update = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (GroupChat == null)
            {

            }
            else
            {
                users = GroupChat.users;
                group = GroupChat.group;
                httpClient = ClientFactory.CreateClient();
                if (group == null)
                {

                }
                else
                {

                    httpClient.BaseAddress = new Uri(url + group.Id);
                    await LoadData();
                    update = true;
                }
            }
            if (update == true)
            {
                await OnAfterRenderAsync(update);
                StateHasChanged();

            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            // This will be executed after the component has rendered
            // Check conditions here and call LoadData as needed
            await LoadData();
        }
    }
    async Task LoadData()
    {
        try
        {
            groupsChats = await httpClient.GetFromJsonAsync<List<GroupChatsSelect>>(httpClient.BaseAddress);

        }
        catch
        {

        }
    }

    private async void SubmitForm()
    {
        try
        {
            if (!string.IsNullOrEmpty(Название))
            {
                byte[] bytes = new byte[10];
                // Files fs = new Files(1, bytes);
                GroupsChats groupsChats = new GroupsChats { Id = 0, Group = group.Id, Users = users.Id, Messages = Название, Bytes = bytes };
                httpClient = ClientFactory.CreateClient();
                httpClient.BaseAddress = new Uri(urlPOST);
                string jsonString = JsonConvert.SerializeObject(groupsChats);
                HttpContent content = new StringContent(jsonString, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(url, content);
                await Update();
                StateHasChanged();
            }
        }
        catch (Exception)
        {

        }
    }
    public async Task Update()
    {
        httpClient = ClientFactory.CreateClient();
        httpClient.BaseAddress = new Uri(url + group.Id);
        await LoadData();
    }
    private async Task RegForm()
    {
    }
}




