@page "/UserUse/"
@using APIConnectify.NET.Models
@rendermode InteractiveServer
@using System.Net.Http.Json
@using Newtonsoft.Json
@using static System.Reflection.Metadata.BlobBuilder
@inject Component userStateService
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject ListChatsAll ListChatsAl
@inject Friends Friend
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

<style>
    /* styles.css (или другой файл, куда вы помещаете свои стили) */

    .chat-button, .friends-button {
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 5px;
        cursor: pointer;
        background-color: #007bff; /* синий цвет */
        color: #ffffff; /* белый цвет текста */
        border: none;
        margin-bottom: 10px;
    }

        .chat-button:hover, .friends-button:hover {
            background-color: #0056b3; /* более темный оттенок синего при наведении */
        }

    /* Можете добавить другие стили по вашему усмотрению */
</style>
<div>
    <button class="chat-button" @onclick="IncrementCount">Посмотреть чат</button>

</div>

<div>
    <button class="friends-button" @onclick="Friends">Друзья</button>
</div>


@code
{


    public int id { get; set; }
    [Parameter]
    public string UsersJson { get; set; }

    [Parameter]
    public Users users { get; set; }

    List<Group> groups = new List<Group>();

    HttpClient httpClient = null!;


    string url = "http://localhost:5000/api/UsersControllers/group";
    string urlUser = "http://localhost:5000/api/UsersControllers/";

    private bool isConnected;
    // await ProtectedLocalStore.SetAsync("password", users.Password);
    // await ProtectedLocalStore.SetAsync("mail", users.Email);
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                isConnected = true;
                string urls = "http://localhost:5000/api/UsersControllers/GETCheck/";

                var result = await ProtectedLocalStore.GetAsync<int>("usersid");
                var usersId   = result.Success ? result.Value : 0;
                var results = await ProtectedLocalStore.GetAsync<string>("password");
                var password = results.Success ? results.Value : "";
                var resultss = await ProtectedLocalStore.GetAsync<string>("mail");
                var mail = resultss.Success ? resultss.Value : "";
        
       
                httpClient = ClientFactory.CreateClient();
                httpClient.BaseAddress = new Uri(urls + mail + "," + password);

                users = await httpClient.GetFromJsonAsync<Users>(httpClient.BaseAddress);

                StateHasChanged();
            }
        }
        catch (Exception)
        {
            users = await httpClient.GetFromJsonAsync<Users>(httpClient.BaseAddress);
            StateHasChanged();

        }
    }

    // protected override void OnInitialized()
    // {
    //     try
    //     {
    //         if (userStateService.users == null)
    //         {

    //         }
    //         else
    //         {
    //             users = userStateService.users;

    //         }
    //     }
    //     catch (Exception)
    //     {

    //     }

    // }


    private async Task IncrementCount()
    {
        try
        {
            // ListChatsAl.users = users;
            httpClient = ClientFactory.CreateClient();
            httpClient.BaseAddress = new Uri(url + users.Id);
            groups = await httpClient.GetFromJsonAsync<List<Group>>(httpClient.BaseAddress);

            // ListChatsAl.groups = groups;

            NavigationManager.NavigateTo($"/ListChatsAll/");
        }
        catch (Exception)
        {
            if (groups.Count() == 0)
            {
                ListChatsAl.groups = groups;
                NavigationManager.NavigateTo($"/ListChatsAll/");
            }
        }
    }


    private void Friends()
    {
        try
        {

            Friend.users = users;

            NavigationManager.NavigateTo($"/Friends/");
        }
        catch (Exception)
        {

        }
    }
}

