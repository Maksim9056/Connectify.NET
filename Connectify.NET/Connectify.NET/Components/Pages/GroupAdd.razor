@page "/GroupAdd/"
@using APIConnectify.NET.Models
@rendermode InteractiveServer
@using System.Net.Http.Json
@using System.Text
@using Newtonsoft.Json
@using static System.Reflection.Metadata.BlobBuilder
@inject IHttpClientFactory ClientFactory
@inject GroupAdd GroupAd
@inject ListChatsAll ListChatsAl;
@* @using Newtonsoft.Json
 *@
@inject NavigationManager NavigationManager

@try
{

    @if (users == null && user2 == null)
    {
        <p><em>Друзей нет</em></p>
    }
    else
    {
        <div style="flex-basis: calc(100% - 2.5px); margin-bottom: 5px;">
            <label for="name">Название группы</label>
            <input type="text" @bind="НазваниеГруппы" name="name" style="width: calc(100% - 22px);"><br>
        </div>
        <label>Выберите друзей</label>

        <div>
            <label>@users.Username <input type="checkbox" @onchange="@(e => ToggleSelection(users.Id))" /></label>
        </div>
        @foreach (var user in user2)
        {
            <div>
                <label>@user.Username <input type="checkbox" @onchange="@(e => ToggleSelection(user.Id))" /></label>
            </div>
        }

    }

    <button class="btn btn-primary" @onclick="IncrementCount">Создать</button>
}
catch (Exception)
{
    <p><em>Ошибка !!</em></p>

}


@code {
    int kod { get; set; }
    HttpClient httpClient = null!;

    [Parameter]
    public Users users { get; set; }//Пользователь который Авторизировался
    public string НазваниеГруппы { get; set; }
    string url = "https://localhost:7086/api/GroupsControllers/POST";
    string urlUser = "https://localhost:7086/api/UsersControllers/friend";

    List<int> FriendsSelect = new List<int>();
    List<Users> user2;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (GroupAd == null)
            {

            }
            else
            {

                if (GroupAd.users == null)
                {

                }
                else
                {
                    users = GroupAd.users;

                    user2 = new List<Users>();
                    await LoadData(users.Id);
                }

            }



        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    async Task LoadData(int id)
    {
        try
        {
            httpClient = ClientFactory.CreateClient();
            httpClient.BaseAddress = new Uri(urlUser + id.ToString());
            user2 = await httpClient.GetFromJsonAsync<List<Users>>(httpClient.BaseAddress);

        }
        catch
        {

        }
    }

    private void ToggleSelection(int user)
    {
        try
        {
            if (FriendsSelect.Contains(user))
            {
                FriendsSelect.Remove(user); // Если уже выбран, удаляем из списка выбранных
            }
            else
            {
                FriendsSelect.Add(user); // Если не выбран, добавляем в список выбранных
            }
        }
        catch (Exception)
        {

        }
    }

    private async void IncrementCount()
    {
        try
        {
            if (!string.IsNullOrEmpty(НазваниеГруппы) && FriendsSelect.Count() > 0)
            {
                Group group = new Group { Id = 0, GroupName = НазваниеГруппы, Participants = FriendsSelect };

                httpClient = ClientFactory.CreateClient();
                httpClient.BaseAddress = new Uri(url);

                string jsonString = JsonConvert.SerializeObject(group);
                HttpContent content = new StringContent(jsonString, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(url, content);
                //Исправлять надо
                ListChatsAl.users = users;
                // kod = response.Content.Headers;
                NavigationManager.NavigateTo($"/ListChatsAll/");

            }

        }
        catch (Exception)
        {

        }
    }




}
