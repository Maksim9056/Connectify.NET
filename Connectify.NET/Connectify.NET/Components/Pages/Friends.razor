@page "/Friends/"
@using APIConnectify.NET.Models
@rendermode InteractiveServer
@using System.Net.Http.Json
@using System.Text
@using Newtonsoft.Json
@using static System.Reflection.Metadata.BlobBuilder
@inject IHttpClientFactory ClientFactory
@inject Friends Friend

<h2>Выберите пользователей для добавления друзья</h2>
@if (users == null && Friens == null)
{
    
}
else
{
    
    @foreach (var user in Friens)
    {
        if (users.Email == user.Email)
        {
        }
        else
        {
            <div>
                <label>@user.Username <input type="checkbox" @onchange="@(e => ToggleSelection(user.Id))" /></label>
            </div>
        }

    }
}


<div>
    <button class="friends-button" @onclick="IncrementCount">Добавить друга</button>
</div>
@code {


    HttpClient httpClient = null!;
    List<Users> Friens = new List<Users>();
    [Parameter]
    public   Users users { get; set; }
    List<APIConnectify.NET.Models.Friends> FriendsSelect = new List<APIConnectify.NET.Models.Friends>();
    string urlFriends = "https://localhost:7086/api/FriendsControllers";
    string url = "https://localhost:7086/api/UsersControllers";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Friend == null)
            {

            }
            else
            {
                if (Friend.users == null)
                {

                }
                else
                {
                    users = Friend.users;
                    httpClient = ClientFactory.CreateClient();
                    httpClient.BaseAddress = new Uri(url);
                    await LoadData();
                }
             
            }
            StateHasChanged();

        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine("An error occurred: " + ex.Message);
        }
    }

    private async Task IncrementCount()
    {
        try
        {
            httpClient = ClientFactory.CreateClient();
            httpClient.BaseAddress = new Uri(urlFriends);
            string jsonString = JsonConvert.SerializeObject(FriendsSelect);
            HttpContent content = new StringContent(jsonString, Encoding.UTF8, "application/json");

            var response = await httpClient.PostAsync(urlFriends, content);
            StateHasChanged();

        }
        catch (Exception ex)
        {
            
        
        }
    }


    async Task LoadData()
    {
        try
        {
            httpClient = ClientFactory.CreateClient();
            httpClient.BaseAddress = new Uri(url);
            Friens = await httpClient.GetFromJsonAsync<List<Users>>(httpClient.BaseAddress);

        }
        catch
        {

        }
    }
    private void ToggleSelection(int user)
    {
        try
        {
            APIConnectify.NET.Models.Friends friends = new APIConnectify.NET.Models.Friends(0, users.Id, user);


            if (FriendsSelect.Contains(friends))
            {
                FriendsSelect.Remove(friends); // Если уже выбран, удаляем из списка выбранных
            }
            else
            {
                FriendsSelect.Add(friends); // Если не выбран, добавляем в список выбранных
            }
        }
        catch
        {

        }
    }


}
