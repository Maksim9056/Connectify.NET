@page "/"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using APIConnectify.NET.Models
@using Newtonsoft.Json
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject Component userStateService
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore
<h1>Авторизация</h1>



<div>
    <p>Почта</p>
    <input type="email" @bind="EMAIL" />
</div>

<div>
    <p>Пароль</p>
    <input type="password" @bind="Password" />
</div>


<style>
    .button {
        margin-top: 10px; /* Измените значение по вашему усмотрению */

    }

    .another-button {
        margin-top: 10px;
        margin-right: 90px; /* Измените значение по вашему усмотрению */
    }
</style>

<div>
    <button type="submit" class="button" @onclick="SubmitForm">Войти</button>
</div>

<div>
    <button type="submit" class="another-button" @onclick="RegForm">Регистрация</button>
</div>
@code {

    string Password { get; set; }

    string EMAIL { get; set; }

    string url = "http://localhost:5000/api/UsersControllers/GETCheck/";
    Users users;

    HttpClient httpClient = null!;

    private async void SubmitForm()
    {
        try
        {


            if (!string.IsNullOrEmpty(Password) && !string.IsNullOrEmpty(EMAIL))
            {
                httpClient = ClientFactory.CreateClient();
                httpClient.BaseAddress = new Uri(url + EMAIL + "," + Password);
                await LoadData();
            }
        }
        catch (Exception)
        {

        }
    }

    private  void RegForm()
    {
        try
        {
            NavigationManager.NavigateTo($"/RegUser");

        }
        catch (Exception)
        {

        }
    }

    async Task LoadData()
    {
        try
        {
            users = await httpClient.GetFromJsonAsync<Users>(httpClient.BaseAddress);


            if (users == null)
            {

            }
            else
            {

                 // userStateService.users = users;
                await ProtectedLocalStore.SetAsync("usersid", users.Id);
                await ProtectedLocalStore.SetAsync("password", users.Password);
                await ProtectedLocalStore.SetAsync("mail", users.Email);

                NavigationManager.NavigateTo($"/UserUse");
            }


        }
        catch (Exception)
        {

        }
    }
}