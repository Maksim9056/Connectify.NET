@page "/call"
@rendermode  InteractiveServer
<h1>Аудио / Видео звонок</h1>

<div>
    <video id="localVideo" style="display: none;"></video>
    <video id="remoteVideo" autoplay style="width: 320px; height: 240px;"></video>
</div>

<div>
    <button onclick="joinCall()">Присоединиться к звонку</button>
    <button onclick="endCall()">Завершить звонок</button>
    <p id="callStatus">Статус: ожидание</p>
    <p>Поделитесь ссылкой с другими для присоединения:</p>
    <input type="text" id="callLink" readonly style="width: 300px;">
</div>

<script>
    let peerConnection;
    let localStream;
    let callId;

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/webrtchub")
        .build();

    connection.on("ReceiveOffer", async (offer) => {
        try {
            if (!peerConnection) {
                createPeerConnection();
            }
            await peerConnection.setRemoteDescription(new RTCSessionDescription({ type: "offer", sdp: offer }));

            const answer = await peerConnection.createAnswer();
            await peerConnection.setLocalDescription(answer);

            await connection.invoke("SendAnswer", answer.sdp);

        } catch (error) {
            console.error('Ошибка при обработке предложения (offer):', error);
        }
    });

    connection.on("UpdateCallStatus", (status) => {
        document.getElementById('callStatus').innerText = `Статус: ${status}`;
    });

    connection.on("ReceiveCallId", (id) => {
        callId = id;
        document.getElementById('callLink').value = `${window.location.origin}/join/${id}`;
    });

    async function joinCall() {
        try {
            const constraints = { audio: true, video: false }; // Запрашиваем только доступ к микрофону

            // Проверяем доступность микрофона
            const mediaDevices = navigator.mediaDevices;
            if (!mediaDevices || !mediaDevices.getUserMedia) {
                alert('Ваш браузер не поддерживает функцию getUserMedia для доступа к медиаустройствам.');
                return;
            }

            const stream = await mediaDevices.getUserMedia(constraints);
            const hasAudio = stream.getAudioTracks().length > 0;

            if (!hasAudio) {
                alert('У вас отсутствует микрофон. Невозможно присоединиться к звонку.');
                return;
            }

            localStream = stream;
            createPeerConnection();

            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);

            // Отправляем оффер и получаем идентификатор звонка
            const response = await connection.invoke("SendOffer", offer.sdp);
            callId = response.callId;
            document.getElementById('callLink').value = `${window.location.origin}/join/${callId}`;

            document.getElementById('callStatus').innerText = 'Статус: в звонке (прослушивание)';

        } catch (error) {
            console.error('Ошибка при присоединении к звонку:', error);
            alert('Невозможно присоединиться к звонку. Проверьте доступ к микрофону.');
        }
    }

    function createPeerConnection() {
        peerConnection = new RTCPeerConnection();

        if (localStream) {
            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
            });
        }

        peerConnection.ontrack = handleRemoteStreamAdded;
        peerConnection.onicecandidate = handleIceCandidate;
    }

    function handleRemoteStreamAdded(event) {
        const remoteVideo = document.getElementById('remoteVideo');
        remoteVideo.srcObject = event.streams[0];
    }

    async function handleIceCandidate(event) {
        if (event.candidate) {
            await connection.invoke("SendIceCandidate", event.candidate, callId);
        }
    }

    async function endCall() {
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }

        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
        }

        const remoteVideo = document.getElementById('remoteVideo');
        remoteVideo.srcObject = null;

        document.getElementById('callStatus').innerText = 'Статус: завершен';
    }

    connection.start()
        .then(() => {
            console.log("SignalR подключен");
            connection.invoke("GetCurrentCallStatus");
        })
        .catch(err => console.error("Ошибка подключения к SignalR:", err));
</script>