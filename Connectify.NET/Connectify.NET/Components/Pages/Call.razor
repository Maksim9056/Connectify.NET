@page "/call/{roomId}"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject HubConnection HubConnection
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h1>Room ID: @roomId</h1>

<div>
    <button @onclick="StartCall">Start Call</button>
    <button @onclick="EndCall">End Call</button>
</div>

<div>
    <button @onclick="StartMicrophoneRecording">Start Microphone</button>
    <button @onclick="StopMicrophoneRecording">Stop Microphone</button>
    <button @onclick="StartCamera">Start Camera</button>
    <button @onclick="StopCamera">Stop Camera</button>
    <button @onclick="StartScreenSharing">Start Screen Sharing</button>
    <button @onclick="StopScreenSharing">Stop Screen Sharing</button>
</div>

<div>
    <h2>Active Users:</h2>
    <ul>
        @foreach (var user in activeUsers)
        {
            <li>@user</li>
        }
    </ul>
</div>

<audio id="audioPlayer" controls style="display: none;"></audio>

@code {
    [Parameter]
    public string roomId { get; set; }

    private List<string> activeUsers = new List<string>();

    private async Task StartMicrophoneRecording()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("startRecording");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting microphone recording: {ex.Message}");
        }
    }

    private async Task StopMicrophoneRecording()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("stopRecordingAndSend", roomId);

            // Добавляем этот вызов, чтобы воспроизвести аудио, когда оно возвращается на клиент
            // await HubConnection.InvokeAsync("SendAudioToCaller", roomId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error stopping microphone recording and sending audio: {ex.Message}");
        }
    }

    private async Task StartCamera()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("startCamera", "cameraPreview");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting camera: {ex.Message}");
        }
    }

    private async Task StopCamera()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("stopCamera", "cameraPreview");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error stopping camera: {ex.Message}");
        }
    }

    private async Task StartScreenSharing()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("startScreenSharing", "screenPreview");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting screen sharing: {ex.Message}");
        }
    }

    private async Task StopScreenSharing()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("stopScreenSharing", "screenPreview");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error stopping screen sharing: {ex.Message}");
        }
    }

    public async Task StartCall()
    {
        try
        {

            HubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/signalr"))
                .Build();
            await HubConnection.StartAsync();

            await HubConnection.SendAsync("CreateAudioRoom", roomId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting call: {ex.Message}");
        }
    }

    public async Task EndCall()
    {
        try
        {
            await HubConnection.InvokeAsync("EndCall", roomId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error ending call: {ex.Message}");
        }
    }

    public void Dispose()
    {
        _ = HubConnection.SendAsync("LeaveAudioRoom", roomId);
    }

    private async void PlayAudio(byte[] audioData)
    {
        try
        {
            var audioPlayer = await JSRuntime.InvokeAsync<IJSObjectReference>("document.getElementById", "audioPlayer");
            await audioPlayer.InvokeVoidAsync("pause");
            await audioPlayer.InvokeVoidAsync("play");
            await audioPlayer.InvokeVoidAsync("setSrcObject", $"data:audio/webm;base64,{Convert.ToBase64String(audioData)}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error playing audio: {ex.Message}");
        }
    }
}

<script>
    // Подключение к SignalR Hub
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/signalr") // Укажите URL вашего SignalR Hub
        .build();

    // Обработчик для получения аудио данных от сервера
    connection.on("ReceiveAudio", async (senderId, audioData) => {
        try {
            // Преобразование массива байт в Blob
            const blob = new Blob([new Uint8Array(audioData)], { type: 'audio/webm' });

            // Преобразование Blob в URL для воспроизведения
            const audioUrl = URL.createObjectURL(blob);

            // Создание нового аудио элемента
            const audioElement = new Audio(audioUrl);

            // Воспроизведение аудио
            audioElement.play()
                .then(() => {
                    // Удаление URL после окончания воспроизведения
                    URL.revokeObjectURL(audioUrl);
                })
                .catch((error) => {
                    console.error('Error playing audio:', error);
                });
        } catch (error) {
            console.error('Error receiving audio:', error);
        }
    });

    // Старт подключения к Hub
    connection.start()
        .then(() => {
            console.log("SignalR connected");
        })
        .catch((error) => {
            console.error("SignalR connection failed:", error);
        });

    // Функция для начала записи аудио
    const startRecording = async function ()  {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            const mediaRecorder = new MediaRecorder(stream);
            const audioChunks = [];

            mediaRecorder.addEventListener('dataavailable', (event) => {
                if (event.data.size > 0) {
                    audioChunks.push(event.data);
                }
            });

            mediaRecorder.start();
            return { mediaRecorder, audioChunks };
        } catch (error) {
            console.error('Error starting recording:', error);
            return { mediaRecorder: null, audioChunks: [] };
        }
    };

    // Функция для остановки записи аудио и отправки на сервер
    const stopRecordingAndSend = async function (roomId, mediaRecorder, audioChunks)  {
        try {
            if (mediaRecorder && mediaRecorder.state === 'recording') {
                mediaRecorder.stop();

                mediaRecorder.addEventListener('stop', async () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                    const reader = new FileReader();

                    reader.onload = async () => {
                        const audioData = Array.from(new Uint8Array(reader.result));

                        // Отправка аудио данных на сервер через SignalR
                        await connection.invoke("SendAudio", roomId, audioData);
                    };
                    reader.readAsArrayBuffer(audioBlob);
                });
            }
        } catch (error) {
            console.error('Error stopping recording and sending audio:', error);
        }
    };

    // Функция для запуска камеры и просмотра видео
    const startCamera = async function  (videoElement)  {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ video: true });
            videoElement.srcObject = stream;
            videoElement.onloadedmetadata = () => {
                videoElement.play();
            };
        } catch (error) {
            console.error('Error starting camera:', error);
        }
    };

    // Функция для остановки камеры или скриншаринга
    const stopMedia = (videoElement) => {
        const stream = videoElement.srcObject;
        if (stream) {
            const tracks = stream.getTracks();
            tracks.forEach(track => {
                track.stop();
            });
            videoElement.srcObject = null;
        }
    };
</script>


@* <script>
    // let recorder; // Объявление переменной в глобальной области

    let mediaRecorder;
    let audioChunks = [];

    // Функция для начала записи аудио
    window.startRecording = async function () {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);

            mediaRecorder.addEventListener('dataavailable', (event) => {
                if (event.data.size > 0) {
                    audioChunks.push(event.data);
                }
            });

            mediaRecorder.start();
        } catch (error) {
            console.error('Error starting recording:', error);
        }
    };

    // Функция для остановки записи аудио и отправки на сервер
    window.stopRecordingAndSend = async function (roomId) {
        try {
            if (mediaRecorder && mediaRecorder.state === 'recording') {
                mediaRecorder.stop();

                mediaRecorder.addEventListener('stop', async () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                    const reader = new FileReader();

                    reader.onload = async () => {
                        const audioData = Array.from(new Uint8Array(reader.result));
                        await DotNet.invokeMethodAsync('Connectify.NET', 'SendAudio', roomId, audioData);
                    };


                    reader.readAsArrayBuffer(audioBlob);
                    audioChunks = [];
                });
            }
        } catch (error) {
            console.error('Error stopping recording and sending audio:', error);
        }
    };

    window.startCamera = function (videoElement) {
        return new Promise((resolve, reject) => {
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(stream => {
                    videoElement.srcObject = stream;
                    videoElement.onloadedmetadata = () => {
                        videoElement.play();
                        resolve();
                    };
                })
                .catch(error => {
                    reject(error);
                });
        });
    };
    window.stopCamera = function (videoElement) {
        const stream = videoElement.srcObject;
        if (stream) {
            const tracks = stream.getTracks();
            tracks.forEach(track => {
                track.stop();
            });
            videoElement.srcObject = null;
        }
    };
    window.startScreenSharing = async function (videoElement) {
        try {
            const stream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: true });
            videoElement.srcObject = stream;
            videoElement.onloadedmetadata = () => {
                videoElement.play();
            };
        } catch (error) {
            console.error('Error starting screen sharing:', error);
        }
    };
    window.stopScreenSharing = function (videoElement) {
        const stream = videoElement.srcObject;
        if (stream) {
            const tracks = stream.getTracks();
            tracks.forEach(track => {
                track.stop();
            });
            videoElement.srcObject = null;
        }
    };
</script> *@
@*


            await HubConnection.SendAsync("StartCall", roomId);
            await HubConnection.SendAsync("EndCall", roomId);

            await HubConnection.StartAsync();

            await HubConnection.SendAsync("CreateAudioRoom", roomId);

            await HubConnection.SendAsync("JoinAudioRoom", roomId);

            HubConnection.On<string>("UserJoined", user =>
            {
                if (!activeUsers.Contains(user))
                {
                    activeUsers.Add(user);
                    InvokeAsync(StateHasChanged); // Вызов StateHasChanged через InvokeAsync
                }
            });

            HubConnection.On<string>("UserLeft", user =>
            {
                if (activeUsers.Contains(user))
                {
                    activeUsers.Remove(user);
                    InvokeAsync(StateHasChanged); // Вызов StateHasChanged через InvokeAsync
                }
            });


       HubConnection.On<object[]>("ReceiveAudio", args =>
    {
        var senderId = args[0] as string;
        var audioData = args[1] as byte[];

        if (senderId != HubConnection.ConnectionId)
        {
            PlayAudio(audioData);
        }
    });


            // Add similar handlers for video and screen sharing if needed

    <h1>Аудио / Видео звонок</h1>

    <p id="callStatus">Статус: ожидание</p>
    <p>Поделитесь ссылкой с другими для присоединения:</p>
    <input type="text" id="callLink" readonly style="width: 300px;">
    // private Func<Task> recordingFunc; // Функция для управления записью

    <button id="joinButton" @onclick="JoinCall">Присоединиться к звонку</button>
    <button @onclick="EndCall">Завершить звонок</button>
    <button @onclick="EndCall">Завершить звонок</button>


    async Task JoinCall()
    {



    }

    void EndCall()
    {
        // Здесь будет код для завершения звонка
        // Например, остановка медиа-потоков и обновление интерфейса
    }
        await JSRuntime.InvokeAsync<string>("joinCall"); // this calls "window.PlaySound()"
                                                          // // Здесь будет код для присоединения к звонку
        // // Например, запрос разрешения на использование медиа-устройств
        await JSRuntime.InvokeAsync<string>("ReceiveOffer"); // this calls "window.PlaySound()"

      // try
        // {
        //     // const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        //     // const localVideo = document.getElementById('localVideo') as HTMLVideoElement;
        //     // localVideo.srcObject = stream;
        //     // localVideo.style.display = 'block';

        //     // Другой код для управления звонком
        // }
        // catch (err)
        // {
        //     console.error('Ошибка при получении доступа к медиа-устройствам:', err);
        // }// private async Task StartRecording()
        // {
        //     try
        //     {
        //         recordingFunc = await JSRuntime.InvokeAsync<Func<Task>>("startRecording");



        //         // Запись начата, можно выполнить дополнительные действия при необходимости
        //         Console.WriteLine("Recording started");
        //     }
        //     catch (Exception ex)
        //     {
        //         Console.WriteLine("Error starting recording: " + ex.Message);
        //     }
        // }
<script>
    // Объявление переменных
    let peerConnection;
    let localStream;
    let callId;
    let connection; // Объявление переменной connection

    // Создание подключения к SignalR хабу
    connection = new signalR.HubConnectionBuilder()
        .withUrl("https://localhost:7068/webrtchub")
        .build();

    // Обработчики событий при получении сообщений от сервера
    connection.on("ReceiveOffer", async (offer) => {
        try {
            if (!peerConnection) {
                createPeerConnection();
            }
            await peerConnection.setRemoteDescription(new RTCSessionDescription({ type: "offer", sdp: offer }));

            const answer = await peerConnection.createAnswer();
            await peerConnection.setLocalDescription(answer);

            await connection.invoke("SendAnswer", answer.sdp);

        } catch (error) {
            console.error('Ошибка при обработке предложения (offer):', error);
        }
    });

    connection.on("UpdateCallStatus", (status) => {
        document.getElementById('callStatus').innerText = `Статус: ${status}`;
    });

    connection.on("ReceiveCallId", (id) => {
        callId = id;
        document.getElementById('callLink').value = `${window.location.origin}/join/${id}`;
    });

    // Определение функции joinCall для присоединения к звонку
    async function joinCall() {
        try {
            const constraints = { audio: true, video: true }; // Включение аудио и видео
            // Получение доступа к медиапотоку (аудио и видео)
            const stream = await navigator.mediaDevices.getUserMedia(constraints);

            const localVideos = document.getElementById('localVideo');

            localStream = stream;
            createPeerConnection();

            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);

            // Отправка оффера на сервер через SignalR
            const response = await connection.invoke("SendOffer", offer.sdp);
            callId = response.callId;
            document.getElementById('callLink').value = `${window.location.origin}/join/${callId}`;

            document.getElementById('callStatus').innerText = 'Статус: в звонке (прослушивание)';

        } catch (error) {
            console.error('Ошибка при присоединении к звонку:', error);
            alert('Невозможно присоединиться к звонку. Проверьте доступ к микрофону.');
        }
    }

    // Установка обработчика события на кнопку для вызова функции joinCall
    document.getElementById('joinButton').onclick = joinCall;

    // Обработка ICE кандидатов
    function handleIceCandidate(event) {
        if (event.candidate) {
            connection.invoke("SendIceCandidate", event.candidate.candidate, callId);
        }
    }

    // Создание объекта RTCPeerConnection
    function createPeerConnection() {
        peerConnection = new RTCPeerConnection();

        // Добавление треков медиапотока в RTCPeerConnection
        if (localStream) {
            localStream.getTracks().forEach(track => {
                peerConnection.addTrack(track, localStream);
            });
        }

        // Обработка удаленного потока
        peerConnection.ontrack = handleRemoteStreamAdded;
        peerConnection.onicecandidate = handleIceCandidate;
    }

    // Обработчик для добавления удаленного потока на видеоэлемент
    function handleRemoteStreamAdded(event) {
        const remoteVideo = document.getElementById('remoteVideo');
        remoteVideo.srcObject = event.streams[0];
    }

    // Функция для завершения звонка
    async function endCall() {
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }

        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
        }

        const remoteVideo = document.getElementById('remoteVideo');
        remoteVideo.srcObject = null;

        document.getElementById('callStatus').innerText = 'Статус: завершен';
    }

    // Запуск подключения к SignalR
    connection.start()
        .then(() => {
            console.log("SignalR подключен");
            connection.invoke("GetCurrentCallStatus");
        })
        .catch(err => console.error("Ошибка подключения к SignalR:", err));
</script>
 *@
@* 
<script>

    import {io} from 'socket.io-client';

const options = {
  "force new connection": true,
  reconnectionAttempts: "Infinity", // avoid having user reconnect manually in order to prevent dead clients after a server restart
  timeout : 10000, // before connect_error and connect_timeout are emitted.
  transports : ["websocket"]
}

const socket = io('/', options);

export default socket;
    const ACTIONS = {
        JOIN: 'join',
        LEAVE: 'leave',
        SHARE_ROOMS: 'share-rooms',
        ADD_PEER: 'add-peer',
        REMOVE_PEER: 'remove-peer',
        RELAY_SDP: 'relay-sdp',
        RELAY_ICE: 'relay-ice',
        ICE_CANDIDATE: 'ice-candidate',
        SESSION_DESCRIPTION: 'session-description'
    };

    module.exports = ACTIONS



</script>
<script>
    // custom.js

    // Функция для запуска видеопотока с камеры и микрофона
    window.startMediaStream = async function (videoElementId) {
        try {
            const videoElement = document.getElementById(videoElementId);
            const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            videoElement.srcObject = stream;
            videoElement.play();
        } catch (error) {
            console.error('Error accessing media devices:', error);
        }
    };

    // Функция для остановки видеопотока
    window.stopMediaStream = async function (videoElementId) {
        try {
            const videoElement = document.getElementById(videoElementId);
            const stream = videoElement.srcObject;
            if (stream) {
                const tracks = stream.getTracks();
                tracks.forEach(track => track.stop());
                videoElement.srcObject = null;
            }
        } catch (error) {
            console.error('Error stopping media stream:', error);
        }
    };

</script>
   *@